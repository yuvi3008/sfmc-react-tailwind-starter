{
  "version": 3,
  "sources": ["../../react-phone-number-input/source/PhoneInputBrowser.js", "../../react-phone-number-input/source/PhoneInput.js", "../../react-phone-number-input/source/usePhoneDigits.js", "../../react-phone-number-input/input/index.js"],
  "sourcesContent": ["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport PhoneInput_ from './PhoneInput.js'\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\tfunction PhoneInput({\r\n\t\t// `<input type=\"tel\"/>`.\r\n\t\ttype = 'tel',\r\n\t\t// Remember (and autofill) the value as a phone number.\r\n\t\tautoComplete = 'tel',\r\n\t\tsmartCaret = true,\r\n\t\tmetadata = defaultMetadata,\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\treturn (\r\n\t\t\t<PhoneInput_\r\n\t\t\t\t{...rest}\r\n\t\t\t\ttype={type}\r\n\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\tmetadata={metadata}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tComponent={smartCaret ? InputSmart : InputBasic}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n\tPhoneInput = React.forwardRef(PhoneInput)\r\n\r\n\tPhoneInput.propTypes = {\r\n\t\t/**\r\n\t\t * HTML `<input/>` `type` attribute.\r\n\t\t */\r\n\t\ttype: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * HTML `<input/>` `autocomplete` attribute.\r\n\t\t */\r\n\t\tautoComplete: PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * By default, the caret position is being \"intelligently\" managed\r\n\t\t * while a user inputs a phone number.\r\n\t\t * This \"smart\" caret behavior can be turned off\r\n\t\t * by passing `smartCaret={false}` property.\r\n\t\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t\t */\r\n\t\t// Is `true` by default.\r\n\t\tsmartCaret: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object\r\n\t}\r\n\r\n\treturn PhoneInput\r\n}\r\n\r\nexport default createInput()", "import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport usePhoneDigits from './usePhoneDigits.js'\r\n\r\nimport { metadata as metadataType } from './PropTypes.js'\r\n\r\nfunction PhoneInput({\r\n\tComponent,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue = true,\r\n\tvalue,\r\n\tonChange,\r\n\tmetadata,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\t...rest\r\n}, ref) {\r\n\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\tconst {\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits,\r\n\t\tinputFormat\r\n\t} = usePhoneDigits({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// * Passing `international` property is deprecated.\r\n\t// * Passing `withCountryCallingCode` property is deprecated.\r\n\t// * Passing `country` property: it should've been called `defaultCountry` instead\r\n\t//   because it only applies when the user inputs a phone number in a national format\r\n\t//   and is completely ignored when the user inputs a phone number in an international format.\r\n\r\n\treturn (\r\n\t\t<Component\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tinputFormat={inputFormat}\r\n\t\t\tinternational={international}\r\n\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\tcountry={country || defaultCountry}\r\n\t\t\tvalue={phoneDigits}\r\n\t\t\tonChange={setPhoneDigits}\r\n\t\t/>\r\n\t)\r\n}\r\n\r\nPhoneInput = React.forwardRef(PhoneInput)\r\n\r\nPhoneInput.propTypes = {\r\n\t/**\r\n\t * The phone number (in E.164 format).\r\n\t * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n\t * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t * Updates the `value` property (to `undefined` in case it's empty).\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * as a national phone number (example: `(213) 373-4253`),\r\n\t * or as an international phone number without \"country calling code\"\r\n\t * if `international` property is passed (example: `213 373 4253`).\r\n\t * Example: \"US\".\r\n\t * If no `country` is passed then `value`\r\n\t * is formatted as an international phone number.\r\n\t * (example: `+1 213 373 4253`)\r\n\t */\r\n\tcountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t * The user can still input a phone number in international format.\r\n\t * Example: \"US\".\r\n\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t */\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If `country` property is passed along with `international={true}` property\r\n\t * then the phone number will be input in \"international\" format for that `country`\r\n\t * (without \"country calling code\").\r\n\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t * (without \"country calling code\" `+1`).\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If `country` and `international` properties are set,\r\n\t * then by default it won't include \"country calling code\" in the input field.\r\n\t * To change that, pass `withCountryCallingCode` property,\r\n\t * and it will include \"country calling code\" in the input field.\r\n\t */\r\n\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t/**\r\n\t * A component that renders the `<input/>` itself and also\r\n\t * parses and formats its `value` as the user inputs it.\r\n\t * See `InputBasic.js` and `InputSmart.js` for an example.\r\n\t */\r\n\tComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t * then the `value` will be formatted as a national phone number by default.\r\n\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t */\r\n\tmetadata: metadataType\r\n}\r\n\r\nexport default PhoneInput", "import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix.js'\r\nimport { validateE164Number } from './helpers/isE164Number.js'\r\nimport { removePrefixFromFormattedPhoneNumber } from './helpers/inputValuePrefix.js'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\t// Validate the use of `withCountryCallingCode` property.\r\n\tif (typeof withCountryCallingCode === 'boolean' && !(country && international)) {\r\n\t\tconsole.error('[react-phone-number-input] `withCountryCallingCode` property can only be used together with `country` and `international` properties')\r\n\t}\r\n\r\n\t// Validate the use of `country` and `defaultCountry` properties.\r\n\tif (country && defaultCountry) {\r\n\t\tconsole.error('[react-phone-number-input] When `country` property is passed, `defaultCountry` property has no effect and therefore shouldn\\'t be passed')\r\n\t}\r\n\r\n\t// Validate the use of `international` property.\r\n\tif (typeof international === 'boolean' && !country) {\r\n\t\tconsole.error('[react-phone-number-input] `international` property can only be used together with `country` property')\r\n\t}\r\n\r\n\tconst inputFormat = getInputFormat({\r\n\t\tinternational,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\twithCountryCallingCode\r\n\t})\r\n\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\r\n\tconst getInitialPhoneDigits = (options) => {\r\n\t\t// Validate that the initially-supplied `value` is in `E.164` format.\r\n\t\t// Because sometimes people attempt to supply a `value` like \"+1 (879) 490-8676\".\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/231#note_2016334796\r\n\t\tif (value) {\r\n\t\t\tvalidateE164Number(value)\r\n\t\t}\r\n\r\n\t\treturn getPhoneDigitsForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tdefaultCountry,\r\n\t\t\tinputFormat,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata,\r\n\t\t\t(...args) => {\r\n\t\t\t\tif (options && options.onCountryMismatch) {\r\n\t\t\t\t\toptions.onCountryMismatch()\r\n\t\t\t\t}\r\n\t\t\t\tonCountryMismatch.apply(this, args)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\r\n\t// `phoneDigits` is the a property that gets passed to the `<input/>` component as its \"value\":\r\n\t// * `phoneDigits` is the `<input value/>` property.\r\n\t// * `value` is the `<PhoneInput value/>` property.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\r\n\tfunction getValueForPhoneDigits(phoneDigits) {\r\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\r\n\t\tif (!phoneDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (inputFormat === 'NATIONAL_PART_OF_INTERNATIONAL') {\r\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\r\n\t\t}\r\n\t\t// Return the E.164 phone number value.\r\n\t\t//\r\n\t\t// Even if no \"national (significant) number\" digits have been input,\r\n\t\t// still return a non-`undefined` value.\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t\t//\r\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t\t// a \"weird\" behavior.\r\n\t\t//\r\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\r\n\t\t// is when that input is `\"+\"`.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\tasYouType.input(phoneDigits)\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tlet countryMismatchDetected\r\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\r\n\t\t\t\tonCountryMismatch() {\r\n\t\t\t\t\tcountryMismatchDetected = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetPhoneDigits(phoneDigits)\r\n\t\t\tif (countryMismatchDetected) {\r\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\r\n\t\t\t}\r\n\t\t}\r\n\t}, [country])\r\n\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (inputFormat === 'INTERNATIONAL') {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is in `withCountryCallingCode` mode,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"NATIONAL\" or in \"NATIONAL_PART_OF_INTERNATIONAL\" format.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinputFormat,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\r\n\treturn {\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits: onSetPhoneDigits,\r\n\t\tinputFormat\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {string} [inputFormat]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinputFormat,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && inputFormat === 'INTERNATIONAL') {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\t// Check for `country` property mismatch for the actual `value`.\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tswitch (inputFormat) {\r\n\t\t\t\tcase 'NATIONAL':\r\n\t\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t\tcase 'NATIONAL_PART_OF_INTERNATIONAL':\r\n\t\t\t\t\treturn parseDigits(\r\n\t\t\t\t\t\tremovePrefixFromFormattedPhoneNumber(\r\n\t\t\t\t\t\t\tphoneNumber.formatInternational(),\r\n\t\t\t\t\t\t\tgetInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\tcase 'INTERNATIONAL':\r\n\t\t\t\t\tthrow new Error('`inputFormat: \"INTERNATIONAL\"` case should\\'ve already been handled earlier in the code')\r\n\t\t\t\tcase 'INTERNATIONAL_OR_NATIONAL':\r\n\t\t\t\t\tthrow new Error('`inputFormat: \"INTERNATIONAL_OR_NATIONAL\"` is not possible when `country` is fixed')\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unknown \\`inputFormat\\`: ${inputFormat}`)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}\r\n\r\nfunction getInputFormat({\r\n\tinternational,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\twithCountryCallingCode\r\n}) {\r\n\treturn country ? (\r\n\t\tinternational ? (\r\n\t\t\twithCountryCallingCode ? 'INTERNATIONAL' : 'NATIONAL_PART_OF_INTERNATIONAL'\r\n\t\t) : 'NATIONAL'\r\n\t) : (\r\n\t\tdefaultCountry ? 'INTERNATIONAL_OR_NATIONAL' : 'INTERNATIONAL'\r\n\t)\r\n}", "import metadata from 'libphonenumber-js/min/metadata'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tformatPhoneNumber as _formatPhoneNumber,\r\n\tformatPhoneNumberIntl as _formatPhoneNumberIntl,\r\n\tisValidPhoneNumber as _isValidPhoneNumber,\r\n\tisPossiblePhoneNumber as _isPossiblePhoneNumber,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tisSupportedCountry as _isSupportedCountry\r\n} from '../core/index.js'\r\n\r\nimport { createInput } from '../modules/PhoneInputBrowser.js'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport default createInput(metadata)\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumber() {\r\n\treturn call(_formatPhoneNumber, arguments)\r\n}\r\n\r\nexport function formatPhoneNumberIntl() {\r\n\treturn call(_formatPhoneNumberIntl, arguments)\r\n}\r\n\r\nexport function isValidPhoneNumber() {\r\n\treturn call(_isValidPhoneNumber, arguments)\r\n}\r\n\r\nexport function isPossiblePhoneNumber() {\r\n\treturn call(_isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}"],
  "mappings": "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",
  "names": ["import_react", "import_prop_types", "import_react", "_ref", "_this", "value", "onChange", "country", "defaultCountry", "international", "withCountryCallingCode", "useNationalFormatForDefaultCountryValue", "metadata", "console", "error", "inputFormat", "getInputFormat", "countryMismatchDetected", "useRef", "onCountryMismatch", "actualCountry", "concat", "current", "getInitialPhoneDigits", "options", "validateE164Number", "getPhoneDigitsForValue", "_len", "arguments", "length", "args", "Array", "_key", "apply", "_useState", "useState", "_useState2", "_slicedToArray", "prevCountry", "setPrevCountry", "_useState3", "_useState4", "prevDefaultCountry", "setPrevDefaultCountry", "_useState5", "_useState6", "phoneDigits", "setPhoneDigits", "_useState7", "_useState8", "valueForPhoneDigits", "setValueForPhoneDigits", "_useState9", "_useState10", "rerenderTrigger", "setRerenderTrigger", "rerender", "useCallback", "getValueForPhoneDigits", "getCountryCallingCode", "asYouType", "AsYouType", "input", "getNumberValue", "useEffect", "onSetPhoneDigits", "prefix", "getInternationalPhoneNumberPrefix", "indexOf", "undefined", "slice", "phoneNumber", "getNumber", "countryCallingCode", "parseDigits", "formatNational", "removePrefixFromFormattedPhoneNumber", "formatInternational", "Error", "_ref2", "PhoneInput", "_ref", "ref", "Component", "country", "defaultCountry", "_ref$useNationalForma", "useNationalFormatForDefaultCountryValue", "value", "onChange", "metadata", "international", "withCountryCallingCode", "rest", "_objectWithoutProperties", "_excluded", "_usePhoneDigits", "usePhoneDigits", "phoneDigits", "setPhoneDigits", "inputFormat", "React", "createElement", "_extends", "forwardRef", "propTypes", "PropTypes", "string", "func", "isRequired", "bool", "elementType", "createInput", "defaultMetadata", "PhoneInput", "_ref", "ref", "_ref$type", "type", "_ref$autoComplete", "autoComplete", "_ref$smartCaret", "smartCaret", "_ref$metadata", "metadata", "rest", "_objectWithoutProperties", "_excluded", "React", "createElement", "PhoneInput_", "_extends", "Component", "InputSmart", "InputBasic", "forwardRef", "propTypes", "PropTypes", "string", "bool", "object", "parsePhoneNumber", "formatPhoneNumber", "formatPhoneNumberIntl", "isValidPhoneNumber", "isPossiblePhoneNumber", "getCountries", "getCountryCallingCode", "isSupportedCountry"]
}
